/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import "RCTModalHostViewComponentView.h"

#import <React/UIView+React.h>
<<<<<<< HEAD
#import <react/components/modal/ModalHostViewComponentDescriptor.h>
#import <react/components/modal/ModalHostViewState.h>
#import <react/components/rncore/EventEmitters.h>
#import <react/components/rncore/Props.h>

#import "FBRCTFabricComponentsPlugins.h"
#import "RCTConversions.h"
=======
#import <react/renderer/components/modal/ModalHostViewComponentDescriptor.h>
#import <react/renderer/components/modal/ModalHostViewState.h>
#import <react/renderer/components/rncore/EventEmitters.h>
#import <react/renderer/components/rncore/Props.h>

#import "RCTConversions.h"

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
#import "RCTFabricModalHostViewController.h"

using namespace facebook::react;

<<<<<<< HEAD
#if !TARGET_OS_TV
=======
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
static UIInterfaceOrientationMask supportedOrientationsMask(ModalHostViewSupportedOrientationsMask mask)
{
  UIInterfaceOrientationMask supportedOrientations = 0;

  if (mask & ModalHostViewSupportedOrientations::Portrait) {
    supportedOrientations |= UIInterfaceOrientationMaskPortrait;
  }

  if (mask & ModalHostViewSupportedOrientations::PortraitUpsideDown) {
    supportedOrientations |= UIInterfaceOrientationMaskPortraitUpsideDown;
  }

  if (mask & ModalHostViewSupportedOrientations::Landscape) {
    supportedOrientations |= UIInterfaceOrientationMaskLandscape;
  }

  if (mask & ModalHostViewSupportedOrientations::LandscapeLeft) {
    supportedOrientations |= UIInterfaceOrientationMaskLandscapeLeft;
  }

  if (mask & ModalHostViewSupportedOrientations::LandscapeRight) {
    supportedOrientations |= UIInterfaceOrientationMaskLandscapeRight;
  }

  if (supportedOrientations == 0) {
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
      return UIInterfaceOrientationMaskAll;
    } else {
      return UIInterfaceOrientationMaskPortrait;
    }
  }

  return supportedOrientations;
}
<<<<<<< HEAD
#endif
=======
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707

static std::tuple<BOOL, UIModalTransitionStyle> animationConfiguration(ModalHostViewAnimationType const animation)
{
  switch (animation) {
    case ModalHostViewAnimationType::None:
      return std::make_tuple(NO, UIModalTransitionStyleCoverVertical);
    case ModalHostViewAnimationType::Slide:
      return std::make_tuple(YES, UIModalTransitionStyleCoverVertical);
    case ModalHostViewAnimationType::Fade:
      return std::make_tuple(YES, UIModalTransitionStyleCrossDissolve);
  }
}

static UIModalPresentationStyle presentationConfiguration(ModalHostViewProps const &props)
{
  if (props.transparent) {
    return UIModalPresentationOverFullScreen;
  }
  switch (props.presentationStyle) {
    case ModalHostViewPresentationStyle::FullScreen:
      return UIModalPresentationFullScreen;
    case ModalHostViewPresentationStyle::PageSheet:
      return UIModalPresentationPageSheet;
    case ModalHostViewPresentationStyle::FormSheet:
      return UIModalPresentationFormSheet;
    case ModalHostViewPresentationStyle::OverFullScreen:
      return UIModalPresentationOverFullScreen;
  }
}

static ModalHostViewEventEmitter::OnOrientationChange onOrientationChangeStruct(CGRect rect)
{
  ;
  auto orientation = rect.size.width < rect.size.height
      ? ModalHostViewEventEmitter::OnOrientationChangeOrientation::Portrait
      : ModalHostViewEventEmitter::OnOrientationChangeOrientation::Landscape;
  return {orientation};
}

@interface RCTModalHostViewComponentView () <RCTFabricModalHostViewControllerDelegate>

@end

@implementation RCTModalHostViewComponentView {
  RCTFabricModalHostViewController *_viewController;
<<<<<<< HEAD
  ModalHostViewShadowNode::ConcreteState::Shared _state;
  BOOL _shouldAnimatePresentation;
  BOOL _isPresented;
=======
  ModalHostViewShadowNode::ConcreteStateTeller _stateTeller;
  BOOL _shouldAnimatePresentation;
  BOOL _isPresented;
  UIView *_modalContentsSnapshot;
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

- (instancetype)initWithFrame:(CGRect)frame
{
  if (self = [super initWithFrame:frame]) {
    static const auto defaultProps = std::make_shared<const ModalHostViewProps>();
    _props = defaultProps;
    _shouldAnimatePresentation = YES;
<<<<<<< HEAD
    _viewController = [RCTFabricModalHostViewController new];
    _viewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    _viewController.delegate = self;
    _isPresented = NO;
  }

  return self;
=======

    _isPresented = NO;
  }

  return self;
}

- (RCTFabricModalHostViewController *)viewController
{
  if (!_viewController) {
    _viewController = [RCTFabricModalHostViewController new];
    _viewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    _viewController.delegate = self;
  }
  return _viewController;
}

- (void)presentViewController:(UIViewController *)modalViewController
                     animated:(BOOL)animated
                   completion:(void (^)(void))completion
{
  UIViewController *controller = [self reactViewController];
  [controller presentViewController:modalViewController animated:animated completion:completion];
}

- (void)dismissViewController:(UIViewController *)modalViewController animated:(BOOL)animated
{
  [modalViewController dismissViewControllerAnimated:animated completion:nil];
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

- (void)ensurePresentedOnlyIfNeeded
{
  BOOL shouldBePresented = !_isPresented && self.window;
  if (shouldBePresented) {
<<<<<<< HEAD
    UIViewController *controller = [self reactViewController];
    _isPresented = YES;
    return [controller
        presentViewController:_viewController
                     animated:_shouldAnimatePresentation
                   completion:^{
                     if (!self->_eventEmitter) {
                       return;
                     }

                     assert(std::dynamic_pointer_cast<ModalHostViewEventEmitter const>(self->_eventEmitter));
                     auto eventEmitter = std::static_pointer_cast<ModalHostViewEventEmitter const>(self->_eventEmitter);
                     eventEmitter->onShow(ModalHostViewEventEmitter::OnShow{});
                   }];
=======
    _isPresented = YES;
    [self presentViewController:self.viewController
                       animated:_shouldAnimatePresentation
                     completion:^{
                       if (!self->_eventEmitter) {
                         return;
                       }

                       assert(std::dynamic_pointer_cast<ModalHostViewEventEmitter const>(self->_eventEmitter));
                       auto eventEmitter =
                           std::static_pointer_cast<ModalHostViewEventEmitter const>(self->_eventEmitter);
                       eventEmitter->onShow(ModalHostViewEventEmitter::OnShow{});
                     }];
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
  }

  BOOL shouldBeHidden = _isPresented && !self.superview;
  if (shouldBeHidden) {
    _isPresented = NO;
<<<<<<< HEAD
    [_viewController dismissViewControllerAnimated:_shouldAnimatePresentation completion:nil];
  }
}

=======
    // To animate dismissal of view controller, snapshot of
    // view hierarchy needs to be added to the UIViewController.
    [self.viewController.view addSubview:_modalContentsSnapshot];
    [self dismissViewController:self.viewController animated:_shouldAnimatePresentation];
  }
}

#pragma mark - RCTMountingTransactionObserving

- (void)mountingTransactionWillMountWithMetadata:(MountingTransactionMetadata const &)metadata
{
  _modalContentsSnapshot = [self.viewController.view snapshotViewAfterScreenUpdates:NO];
}

#pragma mark - UIView methods

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
- (void)didMoveToWindow
{
  [super didMoveToWindow];
  [self ensurePresentedOnlyIfNeeded];
}

- (void)didMoveToSuperview
{
  [super didMoveToSuperview];
  [self ensurePresentedOnlyIfNeeded];
}

#pragma mark - RCTFabricModalHostViewControllerDelegate

- (void)boundsDidChange:(CGRect)newBounds
{
  if (_eventEmitter) {
    assert(std::dynamic_pointer_cast<ModalHostViewEventEmitter const>(_eventEmitter));

    auto eventEmitter = std::static_pointer_cast<ModalHostViewEventEmitter const>(_eventEmitter);
    eventEmitter->onOrientationChange(onOrientationChangeStruct(newBounds));
  }

<<<<<<< HEAD
  if (_state != nullptr) {
    auto newState = ModalHostViewState{RCTSizeFromCGSize(newBounds.size)};
    _state->updateState(std::move(newState));
  }
=======
  auto newState = ModalHostViewState{RCTSizeFromCGSize(newBounds.size)};
  _stateTeller.updateState(std::move(newState));
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

#pragma mark - RCTComponentViewProtocol

+ (ComponentDescriptorProvider)componentDescriptorProvider
{
  return concreteComponentDescriptorProvider<ModalHostViewComponentDescriptor>();
}

- (void)prepareForRecycle
{
  [super prepareForRecycle];
<<<<<<< HEAD
  _state.reset();
=======
  _stateTeller.invalidate();
  _viewController = nil;
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
  _isPresented = NO;
}

- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps
{
  const auto &newProps = *std::static_pointer_cast<const ModalHostViewProps>(props);

#if !TARGET_OS_TV
<<<<<<< HEAD
  _viewController.supportedInterfaceOrientations = supportedOrientationsMask(newProps.supportedOrientations);
=======
  self.viewController.supportedInterfaceOrientations = supportedOrientationsMask(newProps.supportedOrientations);
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
#endif

  std::tuple<BOOL, UIModalTransitionStyle> result = animationConfiguration(newProps.animationType);
  _shouldAnimatePresentation = std::get<0>(result);
<<<<<<< HEAD
  _viewController.modalTransitionStyle = std::get<1>(result);

  _viewController.modalPresentationStyle = presentationConfiguration(newProps);
=======
  self.viewController.modalTransitionStyle = std::get<1>(result);

  self.viewController.modalPresentationStyle = presentationConfiguration(newProps);
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707

  [super updateProps:props oldProps:oldProps];
}

<<<<<<< HEAD
- (void)updateState:(facebook::react::State::Shared const &)state
           oldState:(facebook::react::State::Shared const &)oldState
{
  _state = std::static_pointer_cast<const ModalHostViewShadowNode::ConcreteState>(state);
=======
- (void)updateState:(State::Shared const &)state oldState:(State::Shared const &)oldState
{
  _stateTeller.setConcreteState(state);
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

- (void)mountChildComponentView:(UIView<RCTComponentViewProtocol> *)childComponentView index:(NSInteger)index
{
<<<<<<< HEAD
  [_viewController.view insertSubview:childComponentView atIndex:index];
=======
  [self.viewController.view insertSubview:childComponentView atIndex:index];
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

- (void)unmountChildComponentView:(UIView<RCTComponentViewProtocol> *)childComponentView index:(NSInteger)index
{
  [childComponentView removeFromSuperview];
}

@end
<<<<<<< HEAD

Class<RCTComponentViewProtocol> RCTModalHostViewCls(void)
{
  return RCTModalHostViewComponentView.class;
}
=======
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
