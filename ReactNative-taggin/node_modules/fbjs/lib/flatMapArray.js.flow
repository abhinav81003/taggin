/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @providesModule flatMapArray
<<<<<<< HEAD
 * @typechecks
 */

var push = Array.prototype.push;

=======
 * @flow
 * @typechecks
 */
var push = Array.prototype.push;
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
/**
 * Applies a function to every item in an array and concatenates the resulting
 * arrays into a single flat array.
 *
 * @param {array} array
 * @param {function} fn
 * @return {array}
 */
<<<<<<< HEAD
function flatMapArray(array, fn) {
  var ret = [];
  for (var ii = 0; ii < array.length; ii++) {
    var result = fn.call(array, array[ii], ii);
=======

function flatMapArray<TValue, TNext>(array: Array<TValue>, fn: (value: TValue, index: number) => Array<TNext>): Array<TNext> {
  var ret = [];

  for (var ii = 0; ii < array.length; ii++) {
    var result = fn.call(array, array[ii], ii);

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
    if (Array.isArray(result)) {
      push.apply(ret, result);
    } else if (result != null) {
      throw new TypeError('flatMapArray: Callback must return an array or null, ' + 'received "' + result + '" instead');
    }
  }
<<<<<<< HEAD
=======

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
  return ret;
}

module.exports = flatMapArray;