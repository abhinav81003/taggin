/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 * @format
 */
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
<<<<<<< HEAD
=======

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
<<<<<<< HEAD
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
=======

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
      _next(undefined);
    });
  };
}

const fs = require("fs-extra");

<<<<<<< HEAD
exports.watchFile =
  /*#__PURE__*/
  (function() {
    var _ref = _asyncToGenerator(function*(filename, callback) {
      fs.watchFile(filename, () => {
        callback();
      });
      yield callback();
    });

    return function(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();

exports.makeAsyncCommand = (
  command // eslint-disable-next-line lint/no-unclear-flowtypes
) => argv => {
=======
exports.watchFile = /*#__PURE__*/ (function() {
  var _ref = _asyncToGenerator(function*(filename, callback) {
    fs.watchFile(filename, () => {
      callback();
    });
    yield callback();
  });

  return function(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.makeAsyncCommand = command => argv => {
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
  Promise.resolve(command(argv)).catch(error => {
    console.error(error.stack);
    process.exitCode = 1;
  });
};
