"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var useDeviceOrientation_1 = require("./useDeviceOrientation");
var react_hooks_1 = require("@testing-library/react-hooks");
// @ts-expect-error - untyped implementation
var RCTDeviceEventEmitter_1 = __importDefault(require("react-native/Libraries/EventEmitter/RCTDeviceEventEmitter"));
var react_native_1 = require("react-native");
describe('useDeviceOrientation', function () {
    var emitChangeDimensions = function (screen) {
        if (screen === void 0) { screen = { width: 0, height: 0 }; }
        return RCTDeviceEventEmitter_1.default.emit('didUpdateDimensions', { screen: screen });
    };
    var rotatePortrait = function () { return emitChangeDimensions({ height: 200, width: 100 }); };
    var rotateLandscape = function () { return emitChangeDimensions({ height: 100, width: 200 }); };
    it('should return portrait orientation', function () {
        var result = react_hooks_1.renderHook(function () { return useDeviceOrientation_1.useDeviceOrientation(); }).result;
        react_hooks_1.act(function () { return rotatePortrait(); });
        expect(result.current).toEqual({
            landscape: false,
            portrait: true,
        });
    });
    it('should return landscape orientation', function () {
        var result = react_hooks_1.renderHook(function () { return useDeviceOrientation_1.useDeviceOrientation(); }).result;
        react_hooks_1.act(function () { return rotateLandscape(); });
        expect(result.current).toEqual({
            landscape: true,
            portrait: false,
        });
    });
    it('should return landscape & portrait orientations when window is square', function () {
        var result = react_hooks_1.renderHook(function () { return useDeviceOrientation_1.useDeviceOrientation(); }).result;
        react_hooks_1.act(function () { return emitChangeDimensions({ width: 100, height: 100 }); });
        expect(result.current).toEqual({
            landscape: true,
            portrait: true,
        });
    });
    it('should use latest screen size for orientation state initialization', function () {
        react_native_1.Dimensions.get('screen');
        rotateLandscape();
        var result = react_hooks_1.renderHook(function () { return useDeviceOrientation_1.useDeviceOrientation(); }).result;
        expect(result.current).toEqual({
            landscape: true,
            portrait: false,
        });
    });
});
//# sourceMappingURL=useDeviceOrientation.test.js.map