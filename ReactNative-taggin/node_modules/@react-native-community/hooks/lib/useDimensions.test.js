"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var useDimensions_1 = require("./useDimensions");
var react_hooks_1 = require("@testing-library/react-hooks");
// @ts-expect-error - untyped implementation
var RCTDeviceEventEmitter_1 = __importDefault(require("react-native/Libraries/EventEmitter/RCTDeviceEventEmitter"));
describe('useDimensions', function () {
    var defaultDimensionsMock = {
        screen: { fontScale: 2, height: 1334, scale: 2, width: 750 },
        window: { fontScale: 2, height: 1334, scale: 2, width: 750 },
    };
    var emitChangeDimensions = function (_a) {
        var _b = _a.window, window = _b === void 0 ? defaultDimensionsMock.window : _b, _c = _a.screen, screen = _c === void 0 ? defaultDimensionsMock.screen : _c;
        return RCTDeviceEventEmitter_1.default.emit('didUpdateDimensions', { window: window, screen: screen });
    };
    it('should return device dimensions', function () {
        var result = react_hooks_1.renderHook(function () { return useDimensions_1.useDimensions(); }).result;
        expect(result.current).toEqual(defaultDimensionsMock);
    });
    it('should update dimensions when they change', function () {
        var newWindow = __assign(__assign({}, defaultDimensionsMock.window), { height: 600 });
        var result = react_hooks_1.renderHook(function () { return useDimensions_1.useDimensions(); }).result;
        var initialHeight = result.current.window.height;
        react_hooks_1.act(function () { return emitChangeDimensions({ window: newWindow }); });
        var afterUpdateHeight = result.current.window.height;
        expect({
            initialHeight: initialHeight,
            afterUpdateHeight: afterUpdateHeight,
        }).toEqual({
            initialHeight: 1334,
            afterUpdateHeight: 600,
        });
    });
});
//# sourceMappingURL=useDimensions.test.js.map