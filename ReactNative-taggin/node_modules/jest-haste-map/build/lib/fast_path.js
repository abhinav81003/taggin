'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.relative = relative;
exports.resolve = resolve;

<<<<<<< HEAD
function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
=======
function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
=======
function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// rootDir and filename must be absolute paths (resolved)
function relative(rootDir, filename) {
<<<<<<< HEAD
  return filename.indexOf(rootDir + _path().default.sep) === 0
    ? filename.substr(rootDir.length + 1)
    : _path().default.relative(rootDir, filename);
}

const INDIRECTION_FRAGMENT = '..' + _path().default.sep; // rootDir must be an absolute path and relativeFilename must be simple
=======
  return filename.indexOf(rootDir + path().sep) === 0
    ? filename.substr(rootDir.length + 1)
    : path().relative(rootDir, filename);
}

const INDIRECTION_FRAGMENT = '..' + path().sep; // rootDir must be an absolute path and relativeFilename must be simple
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
// (e.g.: foo/bar or ../foo/bar, but never ./foo or foo/../bar)

function resolve(rootDir, relativeFilename) {
  return relativeFilename.indexOf(INDIRECTION_FRAGMENT) === 0
<<<<<<< HEAD
    ? _path().default.resolve(rootDir, relativeFilename)
    : rootDir + _path().default.sep + relativeFilename;
=======
    ? path().resolve(rootDir, relativeFilename)
    : rootDir + path().sep + relativeFilename;
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}
