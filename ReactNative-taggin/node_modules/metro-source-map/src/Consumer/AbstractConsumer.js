/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
<<<<<<< HEAD
 *  strict-local
=======
 *
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
 * @format
 */
"use strict";

const invariant = require("invariant");

const _require = require("./constants"),
  GENERATED_ORDER = _require.GENERATED_ORDER,
<<<<<<< HEAD
  iterationOrderToString = _require.iterationOrderToString;

// Implementation details shared between MappingsConsumer and SectionsConsumer
=======
  iterationOrderToString = _require.iterationOrderToString; // Implementation details shared between MappingsConsumer and SectionsConsumer

>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
class AbstractConsumer {
  constructor(sourceMap) {
    this._sourceMap = sourceMap;
  }

  originalPositionFor(generatedPosition) {
    invariant(false, "Not implemented");
  }

  generatedMappings() {
    invariant(false, "Not implemented");
  }

  eachMapping(callback) {
    let context =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let order =
      arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : GENERATED_ORDER;
    invariant(
      order === GENERATED_ORDER,
      `Iteration order not implemented: ${iterationOrderToString(order)}`
    );

    for (const mapping of this.generatedMappings()) {
      callback.call(context, mapping);
    }
<<<<<<< HEAD
  } // flowlint unsafe-getters-setters:off
=======
  } // flowlint-next-line unsafe-getters-setters:off
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707

  get file() {
    return this._sourceMap.file;
  }
<<<<<<< HEAD
=======

  sourceContentFor(source, nullOnMissing) {
    invariant(false, "Not implemented");
  }
>>>>>>> e75a71e2c6ac3e5d484a463ebda2ebf8c6ccb707
}

module.exports = AbstractConsumer;
